-- Table to store Users
CREATE TABLE "USER" (
    ID         INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    USER_ID    VARCHAR(36) UNIQUE NOT NULL,
    ORG_ID     VARCHAR(36) NOT NULL,
    TYPE       VARCHAR(50) NOT NULL,
    ATTRIBUTES JSONB,
    CREATED_AT TIMESTAMPTZ DEFAULT NOW(),
    UPDATED_AT TIMESTAMPTZ DEFAULT NOW()
);

-- Table to store basic service provider (app) details.
CREATE TABLE SP_APP (
    ID INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    APP_ID VARCHAR(36) UNIQUE NOT NULL,
    APP_NAME VARCHAR(255) NOT NULL,
    DESCRIPTION VARCHAR(50) NOT NULL
);

-- Table to store OAuth configurations for SP apps.
CREATE TABLE IDN_OAUTH_CONSUMER_APPS (
    ID INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    CONSUMER_KEY VARCHAR(255) NOT NULL,
    CONSUMER_SECRET VARCHAR(255) NOT NULL,
    APP_ID VARCHAR(36) NOT NULL REFERENCES SP_APP(APP_ID) ON DELETE CASCADE,
    CALLBACK_URIS VARCHAR(500),
    GRANT_TYPES VARCHAR(255)
);

-- Table to store inbound auth configs (e.g., OAuth, SAML) for SP apps.
CREATE TABLE SP_INBOUND_AUTH (
    ID INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    INBOUND_AUTH_KEY VARCHAR(255) NOT NULL,
    INBOUND_AUTH_TYPE VARCHAR(50) NOT NULL,
    APP_ID VARCHAR(36) NOT NULL REFERENCES SP_APP(APP_ID) ON DELETE CASCADE
);

-- Table to store allowed origins for OAuth apps.
CREATE TABLE IDN_OAUTH_ALLOWED_ORIGINS (
    ID INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    ALLOWED_ORIGINS VARCHAR(500) NOT NULL UNIQUE
);

-- Table to store API resources.
CREATE TABLE API_RESOURCE (
    ID INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    NAME VARCHAR(255) NOT NULL,
    IDENTIFIER VARCHAR(255) NOT NULL,
    UUID VARCHAR(36) UNIQUE NOT NULL,
    DESCRIPTION VARCHAR(500),
    REQUIRES_AUTHORIZATION BOOLEAN NOT NULL
);

-- Table to store API scopes.
CREATE TABLE SCOPE (
    ID INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    NAME VARCHAR(255) NOT NULL,
    UUID VARCHAR(36) UNIQUE NOT NULL,
    API_ID VARCHAR(36) NOT NULL REFERENCES API_RESOURCE(UUID) ON DELETE CASCADE,
    DISPLAY_NAME VARCHAR(255),
    DESCRIPTION VARCHAR(500)
);

-- Table to store authorized APIs for applications.
CREATE TABLE AUTHORIZED_API (
    APP_ID VARCHAR(36) NOT NULL REFERENCES SP_APP(APP_ID) ON DELETE CASCADE,
    API_ID VARCHAR(36) NOT NULL REFERENCES API_RESOURCE(UUID) ON DELETE CASCADE,
    POLICY VARCHAR(36),
    PRIMARY KEY (APP_ID, API_ID)
);

-- Table to store authorized scopes for applications.
CREATE TABLE AUTHORIZED_SCOPE (
    APP_ID VARCHAR(36) NOT NULL,
    API_ID VARCHAR(36) NOT NULL,
    SCOPE_ID VARCHAR(36) NOT NULL,
    FOREIGN KEY (APP_ID, API_ID) REFERENCES AUTHORIZED_API(APP_ID, API_ID) ON DELETE CASCADE,
    FOREIGN KEY (APP_ID) REFERENCES SP_APP(APP_ID) ON DELETE CASCADE,
    FOREIGN KEY (API_ID) REFERENCES API_RESOURCE(UUID) ON DELETE CASCADE,
    FOREIGN KEY (SCOPE_ID) REFERENCES SCOPE(UUID) ON DELETE CASCADE,
    PRIMARY KEY (APP_ID, API_ID, SCOPE_ID)
);

CREATE TABLE IDP (
    ID INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    IDP_ID VARCHAR(36) UNIQUE NOT NULL,
    NAME VARCHAR(255) NOT NULL,
    DESCRIPTION VARCHAR(500),
    CLIENT_ID VARCHAR(255) NOT NULL,
    CLIENT_SECRET VARCHAR(255) NOT NULL,
    REDIRECT_URI VARCHAR(500) NOT NULL,
    SCOPES VARCHAR(255),
    CREATED_AT TIMESTAMPTZ DEFAULT NOW(),
    UPDATED_AT TIMESTAMPTZ DEFAULT NOW()
);

-- Insert sample data into the tables.
INSERT INTO SP_APP (APP_NAME, APP_ID, DESCRIPTION) VALUES ('Test SPA', '550e8400-e29b-41d4-a716-446655440000', 'Initial testing App');

INSERT INTO IDN_OAUTH_CONSUMER_APPS (CONSUMER_KEY, CONSUMER_SECRET, APP_ID, CALLBACK_URIS, GRANT_TYPES)
VALUES ('client123', 'secret123', '550e8400-e29b-41d4-a716-446655440000', 'https://localhost:3000', 'client_credentials,authorization_code');

INSERT INTO SP_INBOUND_AUTH (INBOUND_AUTH_KEY, INBOUND_AUTH_TYPE, APP_ID)
VALUES ('client123', 'oauth2', '550e8400-e29b-41d4-a716-446655440000');

INSERT INTO IDN_OAUTH_ALLOWED_ORIGINS (ALLOWED_ORIGINS) VALUES ('https://localhost:3000,https://localhost:9001');

INSERT INTO API_RESOURCE (NAME, IDENTIFIER, UUID, DESCRIPTION, REQUIRES_AUTHORIZATION)
VALUES
('SCIM2 users API', '/scim2/Users', '550e8400-e29b-41d4-a716-446655440001', 'API representation of the SCIM2 Users API', TRUE),
('SCIM2 groups API', '/scim2/Groups', '550e8400-e29b-41d4-a716-446655440002', 'API representation of the SCIM2 Groups API', TRUE);

INSERT INTO SCOPE (NAME, UUID, API_ID, DISPLAY_NAME, DESCRIPTION)
VALUES
('internal_user_mgt_view', '550e8400-e29b-41d4-a716-446655440003', '550e8400-e29b-41d4-a716-446655440001', 'View user', 'View user accounts in the organization'),
('internal_user_mgt_edit', '550e8400-e29b-41d4-a716-446655440004', '550e8400-e29b-41d4-a716-446655440001', 'Edit user', 'Edit user accounts in the organization'),
('internal_group_mgt_view', '550e8400-e29b-41d4-a716-446655440005', '550e8400-e29b-41d4-a716-446655440002', 'View group', 'View group details in the organization');

INSERT INTO AUTHORIZED_API (APP_ID, API_ID, POLICY)
VALUES
('550e8400-e29b-41d4-a716-446655440000', '550e8400-e29b-41d4-a716-446655440001', 'RBAC'),
('550e8400-e29b-41d4-a716-446655440000', '550e8400-e29b-41d4-a716-446655440002', 'RBAC');

INSERT INTO AUTHORIZED_SCOPE (APP_ID, API_ID, SCOPE_ID)
VALUES
('550e8400-e29b-41d4-a716-446655440000', '550e8400-e29b-41d4-a716-446655440001', '550e8400-e29b-41d4-a716-446655440003'),
('550e8400-e29b-41d4-a716-446655440000', '550e8400-e29b-41d4-a716-446655440001', '550e8400-e29b-41d4-a716-446655440004'),
('550e8400-e29b-41d4-a716-446655440000', '550e8400-e29b-41d4-a716-446655440002', '550e8400-e29b-41d4-a716-446655440005');

INSERT INTO "USER" (USER_ID, ORG_ID, TYPE, ATTRIBUTES)
VALUES
('550e8400-e29b-41d4-a716-446655440000', '456e8400-e29b-41d4-a716-446655440001', 'person',
'{"age": 30, "roles": ["admin", "user"], "address": {"city": "Colombo", "zip": "00100"}}');

INSERT INTO IDP (IDP_ID, NAME, DESCRIPTION, CLIENT_ID, CLIENT_SECRET, REDIRECT_URI, SCOPES, CREATED_AT, UPDATED_AT)
VALUES
('550e8400-e29b-41d4-a716-446655440000', 'Github', 'Login with Github', 'client1', 'secret1', 'https://localhost:8090/flow/authn', '["user:email","read:user"]', datetime('now'), datetime('now')),
('550e8400-e29b-41d4-a716-446655440001', 'Google', 'Login with Google', 'client2', 'secret2', 'https://localhost:8090/flow/authn', '["user:email","read:user"]', datetime('now'), datetime('now'));
